syntax = "proto3";

package chat;
option go_package = "chat/api;chat";

import "protos/wspush/constant.proto";
import "google/api/annotations.proto";

// 聊天服务
service Chat {
  // 发消息
  rpc SendMsg(SendMsgRequest) returns(SendMsgReply){
    option (google.api.http) = {
      post: "/chat/msg/send",
      body: "*"
    };
  }
  // timeline 同步消息
  rpc SyncMessage(SyncMessageRequest) returns (SyncMessageReply){
    option (google.api.http) = {
      get: "/chat/msg/sync"
    };
  }
}

service Session{
  // 查询会话列表
  rpc GetSession(GetSessionRequest) returns(GetRecentSessionReply){
    option (google.api.http) = {
      post: "/chat/session/list",
      body: "*"
    };
  }
  // 已读消息回执
  rpc ReadMsgNotify(MsgReadAckRequest) returns(MsgReadAckReply){
    option (google.api.http) = {
      post: "/chat/msg/read"
      body: "*"
    };
  }
}

service MsgList{
  // 查询历史消息列表
  rpc GetMsgList(GetMsgListRequest) returns(GetMsgListReply){
    option (google.api.http) = {
      get: "/chat/msg/list"
    };
  }
}

// 发送消息请求
message SendMsgRequest {
  int64 from_user_id = 1;               // 消息发送方
  string to = 2;                        // 消息接受方，单聊用户ID，群聊群ID
  wspush.IMSessionType session_type = 3;  // 会话类型
  string client_msg_id = 4;             // 客户端消息ID，唯一（UUID）
  wspush.IMMsgType msg_type = 5;          // 消息类型
  string msg_data = 6;                  // 消息内容,json
}

// 消息信息
message IMBaseMsg {
  int64 from_user_id = 1;               // 来源会话ID
  string to = 2;                        // 目标ID，单聊userId，群聊groupId
  wspush.IMSessionType session_type = 3;  // 会话类型

  string client_msg_id = 4;       // 消息ID（UUID，客户端生成），去重
  int64 server_msg_seq = 5;       // 递增消息序号（服务端生成），乱序处理

  wspush.IMMsgType msg_type = 6;        // 消息类型
  string msg_data = 7;                // 消息内容
  wspush.IMResCode msg_res_code = 8;    // 消息错误码
  wspush.IMMsgFeature msg_feature = 9;  // 消息属性
  wspush.IMMsgStatus msg_status = 10;   // 消息状态（预留）

  int64 create_time = 11;             // 消息创建时间戳（毫秒）
}

// 发送消息响应
message SendMsgReply {
  int64 msg_seq = 1;         // 服务端生成的递增消息序号，乱序处理
  wspush.IMResCode res_code = 2;    // 消息状态码
  IMBaseMsg msg_info = 3;    // 完整消息内容
}

// 同步消息请求
message SyncMessageRequest{
  string member = 1;
  int64 last_read = 2;
  int32 count = 3;
}

// 同步消息响应
message SyncMessageReply{
  int64 latest_seq = 1;                 // 最新的消息序号
  int64 entry_set_last_seq = 2;         // entry_set 中最后的序号值
  message TimelineEntry {
    int64 sequence = 1;
    IMBaseMsg message = 2;
  }
  repeated TimelineEntry entry_set = 3; // 如果拉取到的结果为空，说明同步完成
}

// 消息已读回复请求（我方）
message MsgReadAckRequest{
  uint64 user_id = 1;   // 消息发送方
  uint64 msg_seq = 2;   // 服务器消息ID，在该ID之前的所有消息被标记为已读
  uint64 session_id = 3;
  wspush.IMSessionType session_type = 4;
}

// 消息已读回复响应
message MsgReadAckReply{
  uint32 unread_count = 1; // 已读消息数量
}

// 最近聊天会话列表请求
message GetSessionRequest {
  int64 user_id = 1;
  uint32 latest_update_time = 2; // 最后更新时间
}

// 会话信息
message IMSessionInfo {
  int32 session_id = 1;                     // 会话id
  string peer_id = 2;                       // 对方id，单聊是对方userId，群聊是groupId
  wspush.IMSessionType session_type = 3;      // 会话类型
  uint32 unread_cnt = 5;                    // 该会话未读消息数量
  uint32 updated_time = 6;                  // 更新时间
  string latest_msg_id = 7;     // 最新一条消息的id（UUID）
  uint64 latest_msg_seq = 8;    // 最新一条消息服务端的id（顺序递增）
  uint32 msg_time_stamp = 9;    // 最新一条消息时间戳（毫秒）
  string msg_data = 10;         // 最新一条消息的内容
  wspush.IMMsgType msg_type = 11; // 最新一条消息的类型
  uint64 msg_from_user_id = 12; // 最新一条消息的发送者
  wspush.IMMsgStatus msg_status = 13;  // 最新一条消息的状态
}

message GetRecentSessionReply {
  int64 user_id = 1;
  int32 unread_counts = 2; // 总未读数量
  repeated IMSessionInfo contact_session_list = 3; // 会话列表
}

// 查询历史聊天消息请求（漫游，任意时间，任意位置）
message GetMsgListRequest {
  message GetMsgBySeq {
    int64 msg_seq = 1;   // 起始或结束的消息序号(不包含在查询结果中)
    // 扫描方向
    // true: 向前扫描（类似微信），msg_seq代表结束消息序号
    // false: 向后扫描，msg_seq代表起始消息序号
    bool is_forward = 2;
  }

  int64 user_id = 1;
  wspush.IMSessionType session_type = 2;
  string peer_id = 3;              // 对方ID，单聊userId，群聊groupId
  GetMsgBySeq filter = 4;          // 扫描条件
  int32 limit_count = 5;           // 本次查询消息的条数上线(最多100条)
  // repeated IMMsgType msg_type_list = 7; // 查询指定的消息类型
  // optional bool is_exclusion_type_ = 8; // 是否排除指定的消息类型
}

//对于群而言，如果消息数目返回的数值小于请求的cnt,则表示群的消息能拉取的到头了，更早的消息没有权限拉取。
//如果limit_count 和 msg_list.count 不一致，说明服务器消息有缺失，需要
//客户端做一个缺失标记，避免下次再次拉取。
message GetMsgListReply {
  int64 end_msg_seq = 1;            // 结束消息序号(不包含在查询结果中)
  repeated IMBaseMsg msg_list = 2;  // 消息列表
}