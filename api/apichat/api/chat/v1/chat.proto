syntax = "proto3";

package apichat;

option go_package = "apichat/api/chat/v1;v1";
option java_package = "com.gomicroim.lib.protos.chat";
option java_outer_classname = "Chat";

import "rpc/chat/api/chat/constant.proto";
import "api/apichat/api/chat/v1/error_reason.proto";

// 消息已读回复请求（我方）
message MsgReadAckRequest{
  uint64 user_id = 1; // 消息发送方
  uint64 session_id = 2;
  uint64 msg_id = 3; // 服务器消息ID，在该ID之前的所有消息被标记为已读
  chat.IMSessionType session_type = 4;
}

// 消息已读回复响应
message MsgReadAckReply{}

// 最近聊天会话列表请求
message GetRecentSessionRequest {
  uint64 user_id = 1;
  uint32 latest_update_time = 2; // 最后更新时间
}

// 会话信息
message CIMContactSessionInfo {
  uint64 session_id = 1;                   // 会话id
  chat.IMSessionType session_type = 2;         // 会话类型
  chat.IMSessionStatusType session_status = 3; // 会话修改命令，预留
  uint32 unread_cnt = 4;                   // 该会话未读消息数量
  uint32 updated_time = 5;                 // 更新时间
  string msg_id = 6;                       // 最新一条消息的id（UUID）
  uint64 server_msg_id = 7;             // 最新一条消息服务端的id（顺序递增）
  uint32 msg_time_stamp = 8;            // 最新一条消息时间戳（毫秒）
  bytes msg_data = 9;                   // 最新一条消息的内容
  chat.IMMsgType msg_type = 10;         // 最新一条消息的类型
  uint64 msg_from_user_id = 11;         // 最新一条消息的发送者
  chat.IMMsgStatus msg_status = 12;     // 最新一条消息的状态（预留）
  /*optional*/
  string msg_attach = 13; // 最新一条消息的附件（预留）
  /*optional*/
  string extend_data = 14; // 本地扩展字段（限制4096）
  /*optional*/
  bool is_robot_session = 15; // 是否为机器人会话
}

message GetRecentSessionReply {
  uint64 user_id = 1;
  uint32 unread_counts = 2; // 总未读数量
  repeated CIMContactSessionInfo contact_session_list = 3; // 会话列表
}

// 历史离线聊天消息请求
message GetMsgListRequest {
  string peer_id = 1;               // 对方ID，单聊userId，群聊groupId
  int64 msg_seq = 2;                // 起始消息序号(不包含在查询结果中)
  bool  is_forward = 3;             // true: 向前扫描 false: 向后扫描
  int32 limit_count = 4;            // 本次查询消息的条数上线(最多100条)
}

// 消息信息
message IMMsgInfo {
  string client_msg_id = 1; // 客户端消息ID（UUID）
  int64 server_msg_id = 2;  // 服务端消息ID

  chat.IMResCode msg_res_code = 3;      // 消息错误码
  chat.IMMsgFeature msg_feature = 4;    // 消息属性
  chat.IMSessionType session_type = 5;  // 会话类型
  int64 from_user_id = 6;               // 来源会话ID
  string peer_id = 7;                   // 目标会话ID
  int64 create_time = 8;                // 消息创建时间戳（毫秒）

  chat.IMMsgType msg_type = 9;      // 消息类型
  chat.IMMsgStatus msg_status = 10; // 消息状态（预留）
  string msg_data = 11;             // 消息内容
}

//对于群而言，如果消息数目返回的数值小于请求的cnt,则表示群的消息能拉取的到头了，更早的消息没有权限拉取。
//如果limit_count 和 msg_list.count 不一致，说明服务器消息有缺失，需要
//客户端做一个缺失标记，避免下次再次拉取。
message GetMsgListReply {
  int64 end_msg_seq = 1;            // 结束消息序号(不包含在查询结果中)
  repeated IMMsgInfo msg_list = 2;  // 消息列表
}

message IMMessage{
  uint64 from = 1;            // 消息发送方
  string to = 2;              // 消息接受方，单聊用户ID，群聊群ID
  string client_msg_id = 4;   // 客户端消息ID，唯一（UUID）
  uint64 server_msg_seq = 5;   // 服务端生成的消息ID，顺序（客户端发送时无需设置）
  int32 create_time = 6;      // 消息创建时间戳(秒)
  chat.IMMsgType msg_type = 7;    // 消息类型
  bytes msg_data = 9;         // 消息内容
}

// 发送消息请求
message SendMsgRequest {
  // 消息发送方（从token中解析）
  // int64 from = 1;
  string to = 1;                // 消息接受方，单聊用户ID，群聊群ID
  string client_msg_id = 2;     // 客户端消息ID，唯一（UUID）
  chat.IMMsgType msg_type = 3;  // 消息类型
  string msg_data = 4;          // 消息内容
}

// 发送消息响应
message SendMsgReply {
  int64 server_msg_seq = 1;       // 服务端生成的消息ID，顺序
  chat.IMResCode res_code = 2;    // 错误码
  IMMsgInfo msg_info = 3;         // 完整消息内容
}

// 同步消息请求
message SyncMessageRequest{
  string member = 1;
  int64 last_read = 2;
  int32 count = 3;
}

message TimelineEntry {
  int64 sequence = 1;
  repeated IMMessage message = 2;
}

// 同步消息响应
message SyncMessageReply{
  // 最新的消息序号
  int64 latest_seq = 1;
  // entry_set 中最后的序号值
  int64 entry_set_last_seq = 2;
  // 如果拉取到的结果为空，说明同步完成
  repeated TimelineEntry entry_set = 3;
}