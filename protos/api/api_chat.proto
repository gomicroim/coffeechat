syntax = "proto3";

package api;
option go_package = "github.com/gomicroim/gomicroim/protos/api;api";
option java_package = "com.gomicroim.lib.protos.api";
option java_outer_classname = "ApiChat";

import "google/api/annotations.proto";
import "protos/wspush/chat.proto";
import "protos/wspush/constant.proto";

// 聊天服务（小群写扩散模式，大群退化到读扩散模式）
service Chat {
  // 发消息
  rpc Send(SendMsgRequest) returns(SendMsgReply){
    option (google.api.http) = {
      post: "/chat/msg/send"
      body: "*"
    };
  }

  // timeline 同步消息（适合有本地存储能力的客户端，如APP）
  rpc SyncMessage(SyncMessageRequest) returns (SyncMessageReply){
    option (google.api.http) = {
      get: "/chat/msg/sync"
    };
  }
}

// 会话服务
service Session {
  // 查询会话列表
  rpc GetSession(GetRecentSessionRequest) returns(GetRecentSessionReply){
    option (google.api.http) = {
      get: "/chat/session/list"
    };
  }

  // 已读消息回执
  rpc ReadMsgNotify(MsgReadAckRequest) returns(MsgReadAckReply){
    option (google.api.http) = {
      post: "/chat/msg/read"
      body: "*"
    };
  }
}

// 消息漫游服务
service MsgList{
  // 查询历史消息列表
  rpc GetMsgList(GetMsgListRequest) returns(GetMsgListReply){
    option (google.api.http) = {
      get: "/chat/msg/list"
    };
  }
}

// 发送消息请求
message SendMsgRequest {
  // int64 from = 1;            // 消息发送方（从token中解析）
  wspush.IMMsg.Peer to = 1;       // 消息接受方，单聊用户ID，群聊群ID
  string msg_uuid = 2;          // 唯一消息ID，客户端生成（UUID）
  wspush.IMMsgType msg_type = 3;  // 消息类型
  string msg_data = 4;          // 消息内容
}

// 发送消息响应
message SendMsgReply {
  int64 msg_seq = 1;              // 服务端生成的消息序号
  wspush.IMResCode res_code = 2;    // 错误码
  wspush.IMMsg msg_info = 3;        // 完整消息内容
}

// 同步消息请求
message SyncMessageRequest{
  string member = 1;
  int64 last_read = 2;
  int32 count = 3;
}

// 同步消息响应
message SyncMessageReply{
  int64 latest_seq = 1;                 // 最新的消息序号
  int64 entry_set_last_seq = 2;         // entry_set 中最后的序号值
  message TimelineEntry {
    int64 sequence = 1;
    repeated wspush.IMMsg message = 2;
  }
  repeated TimelineEntry entry_set = 3; // 如果拉取到的结果为空，说明同步完成
}

// 最近聊天会话列表请求
message GetRecentSessionRequest {
  uint64 user_id = 1;
  uint32 latest_update_time = 2; // 最后更新时间
}

// 最近聊天会话列表响应
message GetRecentSessionReply {
  uint64 user_id = 1;
  uint32 unread_counts = 2;                 // 总未读数量
  repeated wspush.IMSession session_list = 3; // 会话列表
}

// 消息已读回复请求（我方）
message MsgReadAckRequest{
  uint64 user_id = 1; // 消息发送方
  uint64 session_id = 2;
  uint64 msg_id = 3; // 服务器消息ID，在该ID之前的所有消息被标记为已读
  wspush.IMSessionType session_type = 4;
}

// 消息已读回复响应
message MsgReadAckReply{}

// 历史离线聊天消息请求
message GetMsgListRequest {
  string peer_id = 1;               // 对方ID，单聊userId，群聊groupId
  int64 msg_seq = 2;                // 起始消息序号(不包含在查询结果中)
  bool  is_forward = 3;             // true: 向前扫描 false: 向后扫描
  int32 limit_count = 4;            // 本次查询消息的条数上线(最多100条)
}

//对于群而言，如果消息数目返回的数值小于请求的cnt,则表示群的消息能拉取的到头了，更早的消息没有权限拉取。
//如果limit_count 和 msg_list.count 不一致，说明服务器消息有缺失，需要
//客户端做一个缺失标记，避免下次再次拉取。
message GetMsgListReply {
  int64 end_msg_seq = 1;            // 结束消息序号(不包含在查询结果中)
  repeated wspush.IMMsg msg_list = 2; // 消息列表
}