// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.4.0
// - protoc             v3.17.3
// source: protos/api/api_chat.proto

package api

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationChatSend = "/api.Chat/Send"
const OperationChatSyncMessage = "/api.Chat/SyncMessage"

type ChatHTTPServer interface {
	Send(context.Context, *SendMsgRequest) (*SendMsgReply, error)
	SyncMessage(context.Context, *SyncMessageRequest) (*SyncMessageReply, error)
}

func RegisterChatHTTPServer(s *http.Server, srv ChatHTTPServer) {
	r := s.Route("/")
	r.POST("/chat/msg/send", _Chat_Send0_HTTP_Handler(srv))
	r.GET("/chat/msg/sync", _Chat_SyncMessage0_HTTP_Handler(srv))
}

func _Chat_Send0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SendMsgRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatSend)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.Send(ctx, req.(*SendMsgRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SendMsgReply)
		return ctx.Result(200, reply)
	}
}

func _Chat_SyncMessage0_HTTP_Handler(srv ChatHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in SyncMessageRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationChatSyncMessage)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.SyncMessage(ctx, req.(*SyncMessageRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*SyncMessageReply)
		return ctx.Result(200, reply)
	}
}

type ChatHTTPClient interface {
	Send(ctx context.Context, req *SendMsgRequest, opts ...http.CallOption) (rsp *SendMsgReply, err error)
	SyncMessage(ctx context.Context, req *SyncMessageRequest, opts ...http.CallOption) (rsp *SyncMessageReply, err error)
}

type ChatHTTPClientImpl struct {
	cc *http.Client
}

func NewChatHTTPClient(client *http.Client) ChatHTTPClient {
	return &ChatHTTPClientImpl{client}
}

func (c *ChatHTTPClientImpl) Send(ctx context.Context, in *SendMsgRequest, opts ...http.CallOption) (*SendMsgReply, error) {
	var out SendMsgReply
	pattern := "/chat/msg/send"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationChatSend))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *ChatHTTPClientImpl) SyncMessage(ctx context.Context, in *SyncMessageRequest, opts ...http.CallOption) (*SyncMessageReply, error) {
	var out SyncMessageReply
	pattern := "/chat/msg/sync"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationChatSyncMessage))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationSessionGetSession = "/api.Session/GetSession"
const OperationSessionReadMsgNotify = "/api.Session/ReadMsgNotify"

type SessionHTTPServer interface {
	GetSession(context.Context, *GetRecentSessionRequest) (*GetRecentSessionReply, error)
	ReadMsgNotify(context.Context, *MsgReadAckRequest) (*MsgReadAckReply, error)
}

func RegisterSessionHTTPServer(s *http.Server, srv SessionHTTPServer) {
	r := s.Route("/")
	r.GET("/chat/session/list", _Session_GetSession0_HTTP_Handler(srv))
	r.POST("/chat/msg/read", _Session_ReadMsgNotify0_HTTP_Handler(srv))
}

func _Session_GetSession0_HTTP_Handler(srv SessionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetRecentSessionRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSessionGetSession)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetSession(ctx, req.(*GetRecentSessionRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetRecentSessionReply)
		return ctx.Result(200, reply)
	}
}

func _Session_ReadMsgNotify0_HTTP_Handler(srv SessionHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in MsgReadAckRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationSessionReadMsgNotify)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReadMsgNotify(ctx, req.(*MsgReadAckRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*MsgReadAckReply)
		return ctx.Result(200, reply)
	}
}

type SessionHTTPClient interface {
	GetSession(ctx context.Context, req *GetRecentSessionRequest, opts ...http.CallOption) (rsp *GetRecentSessionReply, err error)
	ReadMsgNotify(ctx context.Context, req *MsgReadAckRequest, opts ...http.CallOption) (rsp *MsgReadAckReply, err error)
}

type SessionHTTPClientImpl struct {
	cc *http.Client
}

func NewSessionHTTPClient(client *http.Client) SessionHTTPClient {
	return &SessionHTTPClientImpl{client}
}

func (c *SessionHTTPClientImpl) GetSession(ctx context.Context, in *GetRecentSessionRequest, opts ...http.CallOption) (*GetRecentSessionReply, error) {
	var out GetRecentSessionReply
	pattern := "/chat/session/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationSessionGetSession))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *SessionHTTPClientImpl) ReadMsgNotify(ctx context.Context, in *MsgReadAckRequest, opts ...http.CallOption) (*MsgReadAckReply, error) {
	var out MsgReadAckReply
	pattern := "/chat/msg/read"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationSessionReadMsgNotify))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

const OperationMsgListGetMsgList = "/api.MsgList/GetMsgList"

type MsgListHTTPServer interface {
	GetMsgList(context.Context, *GetMsgListRequest) (*GetMsgListReply, error)
}

func RegisterMsgListHTTPServer(s *http.Server, srv MsgListHTTPServer) {
	r := s.Route("/")
	r.GET("/chat/msg/list", _MsgList_GetMsgList0_HTTP_Handler(srv))
}

func _MsgList_GetMsgList0_HTTP_Handler(srv MsgListHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetMsgListRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationMsgListGetMsgList)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetMsgList(ctx, req.(*GetMsgListRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetMsgListReply)
		return ctx.Result(200, reply)
	}
}

type MsgListHTTPClient interface {
	GetMsgList(ctx context.Context, req *GetMsgListRequest, opts ...http.CallOption) (rsp *GetMsgListReply, err error)
}

type MsgListHTTPClientImpl struct {
	cc *http.Client
}

func NewMsgListHTTPClient(client *http.Client) MsgListHTTPClient {
	return &MsgListHTTPClientImpl{client}
}

func (c *MsgListHTTPClientImpl) GetMsgList(ctx context.Context, in *GetMsgListRequest, opts ...http.CallOption) (*GetMsgListReply, error) {
	var out GetMsgListReply
	pattern := "/chat/msg/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationMsgListGetMsgList))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
