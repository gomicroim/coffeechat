// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: protos/api/api_chat.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ChatClient is the client API for Chat service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ChatClient interface {
	// 发消息
	Send(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgReply, error)
	// timeline 同步消息（适合有本地存储能力的客户端，如APP）
	SyncMessage(ctx context.Context, in *SyncMessageRequest, opts ...grpc.CallOption) (*SyncMessageReply, error)
}

type chatClient struct {
	cc grpc.ClientConnInterface
}

func NewChatClient(cc grpc.ClientConnInterface) ChatClient {
	return &chatClient{cc}
}

func (c *chatClient) Send(ctx context.Context, in *SendMsgRequest, opts ...grpc.CallOption) (*SendMsgReply, error) {
	out := new(SendMsgReply)
	err := c.cc.Invoke(ctx, "/api.Chat/Send", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *chatClient) SyncMessage(ctx context.Context, in *SyncMessageRequest, opts ...grpc.CallOption) (*SyncMessageReply, error) {
	out := new(SyncMessageReply)
	err := c.cc.Invoke(ctx, "/api.Chat/SyncMessage", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ChatServer is the server API for Chat service.
// All implementations must embed UnimplementedChatServer
// for forward compatibility
type ChatServer interface {
	// 发消息
	Send(context.Context, *SendMsgRequest) (*SendMsgReply, error)
	// timeline 同步消息（适合有本地存储能力的客户端，如APP）
	SyncMessage(context.Context, *SyncMessageRequest) (*SyncMessageReply, error)
	mustEmbedUnimplementedChatServer()
}

// UnimplementedChatServer must be embedded to have forward compatible implementations.
type UnimplementedChatServer struct {
}

func (UnimplementedChatServer) Send(context.Context, *SendMsgRequest) (*SendMsgReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Send not implemented")
}
func (UnimplementedChatServer) SyncMessage(context.Context, *SyncMessageRequest) (*SyncMessageReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SyncMessage not implemented")
}
func (UnimplementedChatServer) mustEmbedUnimplementedChatServer() {}

// UnsafeChatServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChatServer will
// result in compilation errors.
type UnsafeChatServer interface {
	mustEmbedUnimplementedChatServer()
}

func RegisterChatServer(s grpc.ServiceRegistrar, srv ChatServer) {
	s.RegisterService(&Chat_ServiceDesc, srv)
}

func _Chat_Send_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).Send(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chat/Send",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).Send(ctx, req.(*SendMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Chat_SyncMessage_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SyncMessageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ChatServer).SyncMessage(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Chat/SyncMessage",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ChatServer).SyncMessage(ctx, req.(*SyncMessageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Chat_ServiceDesc is the grpc.ServiceDesc for Chat service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chat_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Chat",
	HandlerType: (*ChatServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Send",
			Handler:    _Chat_Send_Handler,
		},
		{
			MethodName: "SyncMessage",
			Handler:    _Chat_SyncMessage_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/api/api_chat.proto",
}

// SessionClient is the client API for Session service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SessionClient interface {
	// 查询会话列表
	GetSession(ctx context.Context, in *GetRecentSessionRequest, opts ...grpc.CallOption) (*GetRecentSessionReply, error)
	// 已读消息回执
	ReadMsgNotify(ctx context.Context, in *MsgReadAckRequest, opts ...grpc.CallOption) (*MsgReadAckReply, error)
}

type sessionClient struct {
	cc grpc.ClientConnInterface
}

func NewSessionClient(cc grpc.ClientConnInterface) SessionClient {
	return &sessionClient{cc}
}

func (c *sessionClient) GetSession(ctx context.Context, in *GetRecentSessionRequest, opts ...grpc.CallOption) (*GetRecentSessionReply, error) {
	out := new(GetRecentSessionReply)
	err := c.cc.Invoke(ctx, "/api.Session/GetSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sessionClient) ReadMsgNotify(ctx context.Context, in *MsgReadAckRequest, opts ...grpc.CallOption) (*MsgReadAckReply, error) {
	out := new(MsgReadAckReply)
	err := c.cc.Invoke(ctx, "/api.Session/ReadMsgNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SessionServer is the server API for Session service.
// All implementations must embed UnimplementedSessionServer
// for forward compatibility
type SessionServer interface {
	// 查询会话列表
	GetSession(context.Context, *GetRecentSessionRequest) (*GetRecentSessionReply, error)
	// 已读消息回执
	ReadMsgNotify(context.Context, *MsgReadAckRequest) (*MsgReadAckReply, error)
	mustEmbedUnimplementedSessionServer()
}

// UnimplementedSessionServer must be embedded to have forward compatible implementations.
type UnimplementedSessionServer struct {
}

func (UnimplementedSessionServer) GetSession(context.Context, *GetRecentSessionRequest) (*GetRecentSessionReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSession not implemented")
}
func (UnimplementedSessionServer) ReadMsgNotify(context.Context, *MsgReadAckRequest) (*MsgReadAckReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReadMsgNotify not implemented")
}
func (UnimplementedSessionServer) mustEmbedUnimplementedSessionServer() {}

// UnsafeSessionServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SessionServer will
// result in compilation errors.
type UnsafeSessionServer interface {
	mustEmbedUnimplementedSessionServer()
}

func RegisterSessionServer(s grpc.ServiceRegistrar, srv SessionServer) {
	s.RegisterService(&Session_ServiceDesc, srv)
}

func _Session_GetSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentSessionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).GetSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Session/GetSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).GetSession(ctx, req.(*GetRecentSessionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Session_ReadMsgNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgReadAckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SessionServer).ReadMsgNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.Session/ReadMsgNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SessionServer).ReadMsgNotify(ctx, req.(*MsgReadAckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Session_ServiceDesc is the grpc.ServiceDesc for Session service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Session_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.Session",
	HandlerType: (*SessionServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetSession",
			Handler:    _Session_GetSession_Handler,
		},
		{
			MethodName: "ReadMsgNotify",
			Handler:    _Session_ReadMsgNotify_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/api/api_chat.proto",
}

// MsgListClient is the client API for MsgList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MsgListClient interface {
	// 查询历史消息列表
	GetMsgList(ctx context.Context, in *GetMsgListRequest, opts ...grpc.CallOption) (*GetMsgListReply, error)
}

type msgListClient struct {
	cc grpc.ClientConnInterface
}

func NewMsgListClient(cc grpc.ClientConnInterface) MsgListClient {
	return &msgListClient{cc}
}

func (c *msgListClient) GetMsgList(ctx context.Context, in *GetMsgListRequest, opts ...grpc.CallOption) (*GetMsgListReply, error) {
	out := new(GetMsgListReply)
	err := c.cc.Invoke(ctx, "/api.MsgList/GetMsgList", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgListServer is the server API for MsgList service.
// All implementations must embed UnimplementedMsgListServer
// for forward compatibility
type MsgListServer interface {
	// 查询历史消息列表
	GetMsgList(context.Context, *GetMsgListRequest) (*GetMsgListReply, error)
	mustEmbedUnimplementedMsgListServer()
}

// UnimplementedMsgListServer must be embedded to have forward compatible implementations.
type UnimplementedMsgListServer struct {
}

func (UnimplementedMsgListServer) GetMsgList(context.Context, *GetMsgListRequest) (*GetMsgListReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMsgList not implemented")
}
func (UnimplementedMsgListServer) mustEmbedUnimplementedMsgListServer() {}

// UnsafeMsgListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MsgListServer will
// result in compilation errors.
type UnsafeMsgListServer interface {
	mustEmbedUnimplementedMsgListServer()
}

func RegisterMsgListServer(s grpc.ServiceRegistrar, srv MsgListServer) {
	s.RegisterService(&MsgList_ServiceDesc, srv)
}

func _MsgList_GetMsgList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMsgListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgListServer).GetMsgList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.MsgList/GetMsgList",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgListServer).GetMsgList(ctx, req.(*GetMsgListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MsgList_ServiceDesc is the grpc.ServiceDesc for MsgList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MsgList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.MsgList",
	HandlerType: (*MsgListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetMsgList",
			Handler:    _MsgList_GetMsgList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/api/api_chat.proto",
}
